Chapter 1 - Arrays & Strings

===========================================================================================================
PROBLEMS
===========================================================================================================


1.1 - Is Unique: Implement an algorithm to determine if a string has all unique characters. What if you
  cannot use additional data structures?

1.2 Check Permutation: Given two strings, write a method to decide if one is a permutation of the
  other. 

1.3 URLify: Write a method to replace all spaces in a string with '%2e: You may assume that the string
  has sufficient space at the end to hold the additional characters, and that you are given the "true"
  length of the string. (Note: if implementing in Java, please use a character array so that you can
  perform this operation in place.)
  EXAMPLE
  Input: "Mr John Smith JJ, 13
  Output: "Mr%2eJohn%2eSmith" 

1.4 Palindrome Permutation: Given a string, write a function to check if it is a permutation of
  a palindrome. A palindrome is a word or phrase that is the same forwards and backwards. A
  permutation is a rearrangement of letters. The palindrome does not need to be limited to just
  dictionary words.
  EXAMPLE
  Input: Tact Coa
  Output: True (permutations:"taco cat'; "atco cta'; etc.) 
  
1.5 One Away: There are three types of edits that can be performed on strings: insert a character,
  remove a character, or replace a character. Given two strings, write a function to check if they are
  one edit (or zero edits) away.
  EXAMPLE
  pale, ple -) true
  pales, pale -) true
  pale, bale -) true
  pale, bae -) false
  
1.6 String Compression: Implement a method to perform basic string compression using the counts
  of repeated characters. For example, the string aabcccccaaa would become a2blc5a3. If the
  "compressed" string would not become smaller than the original string, your method should return
  the original string. You can assume the string has only uppercase and lowercase letters (a - z).
  
1.7 Rotate Matrix: Given an image represented by an NxN matrix, where each pixel in the image is 4
  bytes, write a method to rotate the image by 90 degrees. Can you do this in place?
  
1.8 Zero Matrix: Write an algorithm such that if an element in an MxN matrix is 0, its entire row and
  column are set to 0.

1.9 String Rotation: Assume you have a method i5Substring which checks ifone word is a substring
  of another. Given two strings, 51 and 52, write code to check if 52 is a rotation of 51 using only one
  call to isSubstring (e.g., Uwaterbottleuis a rotation ofuerbottlewatU).


===========================================================================================================
SOLUTIONS
===========================================================================================================


===========================================================================================================
1.1     

  bool uniqueString(string str)
  {

      //There are 128 ASCII characters.
      //boolArray is created with 128 elements - one for each character.
      //The default bool values are false.
      bool[] boolArray = new bool[128];
      for (int i = 0; i < str.Length; i++)
      {
          //val represents the decimal equivalent of the ASCII character.
          //For example, if str[0] = 'a', then int val = 97
          int val = str[i];

          //If the boolArray[val] has already been set to true,
          //then the character has been duplicated.
          if (boolArray[val])
          {
              return false;
          }
          boolArray[val] = true;
      }
      return true;
  }

  Console.WriteLine(uniqueString("abca")); //This returns false
  
===========================================================================================================
1.2

  bool CheckPermutation(string str1, string str2)
  {
      //The function converts the string to lower case and sorts the characters
      str1 = sortLowercaseString(str1);
      str2 = sortLowercaseString(str2);

      if (str1 == str2)
      {
          return true;
      }
      return false;
  }

  string sortLowercaseString(string str)
  {
      str = str.ToLower();
      char[] charArray = str.ToArray();
      Array.Sort(charArray);
      string result = new string(charArray);
      return result;
  }

  // Console.WriteLine(sortLowercaseString("CbA")); //This returns "abc"

  Console.WriteLine(CheckPermutation("abc","bCA")); //This returns true
  
===========================================================================================================
1.3

  string convertString(string inputString)
  {
      //Removes spaces from the beginning and end of the string.
      string trimString = inputString.Trim(' ');

      StringBuilder sb = new StringBuilder();
      sb.Append(trimString[0]);

      //Adds non-repeating elements to the StringBuilder.
      //Ex: "aaabbbccc" --> "abc"
      for(int i = 1; i < trimString.Length; i++)
      {
          if(trimString[i] != trimString[i - 1])
          {
              sb.Append(trimString[i]);
          }
      }

      sb.Replace(" ", "%20");
      string result = sb.ToString();

      return result;
  }

  Console.WriteLine(convertString("   t  e  s  t   ")); //This returns "t%20e%20s%20t"
  
===========================================================================================================
1.4

  bool checkPalindrome(string str)
  {
      List<char> list = new List<char>();

      for (int i = 0; i < str.Length; i++)
      {
          if (list.Contains(str[i]))
          {
              list.Remove(str[i]);
          }
          else
          {
              list.Add(str[i]);
          }
      }

      //Returns true if the string is even, and the number of odd characters is 0
      if (str.Length % 2 == 0 && list.Count == 0)
      {
          return true;
      }

      //Returns true if the string is odd, and the number of odd characters is 1
      else if (str.Length % 2 == 1 && list.Count == 1)
      {
          return true;
      }

      return false;
  }

  bool output = checkPalindrome("abbac"); //This returns true, and the palindrome is "abcba"
  Console.WriteLine(output);

===========================================================================================================
1.5

===========================================================================================================
1.6

===========================================================================================================
1.7

===========================================================================================================
1.8

===========================================================================================================
1.9



