Chapter 1 - Arrays & Strings

===========================================================================================================
USEFUL IMPORTANT CONCEPTS
===========================================================================================================
- A hash table is a data structure that maps keys to values for highly efficient lookup. There are a number of
  ways of implementing this. Here, we will describe a simple but common implementation.
  
- In C#, Arrays are not resizeable, and Lists are resizable. Lists will grow as you add items.

- When concatenating a string, a new string is instantiated, and the two strings are copied over.
  StringBuilder concatenates strings faster and uses less memory because it uses a resizeable list of characters.



===========================================================================================================
PROBLEMS
===========================================================================================================

1.1 - Is Unique: Implement an algorithm to determine if a string has all unique characters. What if you
  cannot use additional data structures?

1.2 Check Permutation: Given two strings, write a method to decide if one is a permutation of the
  other. 

1.3 URLify: Write a method to replace all spaces in a string with '%2e: You may assume that the string
  has sufficient space at the end to hold the additional characters, and that you are given the "true"
  length of the string. (Note: if implementing in Java, please use a character array so that you can
  perform this operation in place.)
  EXAMPLE
  Input: "Mr John Smith JJ, 13
  Output: "Mr%2eJohn%2eSmith" 

1.4 Palindrome Permutation: Given a string, write a function to check if it is a permutation of
  a palindrome. A palindrome is a word or phrase that is the same forwards and backwards. A
  permutation is a rearrangement of letters. The palindrome does not need to be limited to just
  dictionary words.
  EXAMPLE
  Input: Tact Coa
  Output: True (permutations:"taco cat'; "atco cta'; etc.) 
  
1.5 One Away: There are three types of edits that can be performed on strings: insert a character,
  remove a character, or replace a character. Given two strings, write a function to check if they are
  one edit (or zero edits) away.
  EXAMPLE
  pale, ple -) true
  pales, pale -) true
  pale, bale -) true
  pale, bae -) false
  
1.6 String Compression: Implement a method to perform basic string compression using the counts
  of repeated characters. For example, the string aabcccccaaa would become a2blc5a3. If the
  "compressed" string would not become smaller than the original string, your method should return
  the original string. You can assume the string has only uppercase and lowercase letters (a - z).
  
1.7 Rotate Matrix: Given an image represented by an NxN matrix, where each pixel in the image is 4
  bytes, write a method to rotate the image by 90 degrees. Can you do this in place?
  
1.8 Zero Matrix: Write an algorithm such that if an element in an MxN matrix is 0, its entire row and
  column are set to 0.

1.9 String Rotation: Assume you have a method i5Substring which checks ifone word is a substring
  of another. Given two strings, 51 and 52, write code to check if 52 is a rotation of 51 using only one
  call to isSubstring (e.g., Uwaterbottleuis a rotation ofuerbottlewatU).
  
===========================================================================================================
USEFUL SNIPPETS
===========================================================================================================

  str = str.ToLower(); //converts a string to all lower case letters
  str = str.ToUpper(); //converts a string to all upper case letters
  str = str.Trim(); //removes the white space from before and after the string
  str[0]; //the character of the string at index 0. ex) str = "abc", str[0] = "a"
  
  StringBuilder sb = new StringBuilder(); //creates an empty StringBuilder
  sb.Append(str); //concatenates the string to the StringBuilder
  sb.Replace(oldString, newString); //replaces all old strings with new strings
  string result = sb.ToString(); //converts StringBuilder to string
  
  List<char> list = new List<char>(); //creates an empty list
  list.Contains(str[0]) //checks if list contains a value
  list.Remove(str[0]); //removes first value from the list
  list.Add(str[0]); //adds a value to the end of the list
  list.Count; //gives the number of values in the list
  
  bool[] boolArray = new bool[128]; //creates a new array of type bool with 128 default 'false' values
  char[] arr = str.ToArray(); //converts a string to an array of characters
  Array.Sort(arr); //sorts an array
  string result = new string(arr); //converts an array of characters to a new string
  
  int[][] testMatrix =
  {
    new int[] { 1, 2, 3 },
    new int[] { 4, 5, 6 },
    new int[] { 7, 8, 9 }
  }; //creates 2 x 2 array

===========================================================================================================
SOLUTIONS
===========================================================================================================

1.1

//Using HashSet data structure:

  bool UniqueString(string str)
  {
      HashSet<char> hashSet = new HashSet<char>();
      for (int i = 0; i < str.Length; i++)
      {
          //If the HashSet already contains the current character,
          //then the character has been duplicated.
          if (hashSet.Contains(str[i]))
          {
              return false;
          }
          else
          {
              hashSet.Add(str[i]);
          }
      }
      return true;
  }

//Not using additional data structures:

  bool UniqueString(string str)
  {
      //There are 128 ASCII characters.
      //boolArray is created with 128 elements - one for each character.
      //The default bool values are false.
      bool[] boolArray = new bool[128];
      for (int i = 0; i < str.Length; i++)
      {
          //val represents the decimal equivalent of the ASCII character.
          //For example, if str[0] = 'a', then int val = 97
          int val = str[i];

          //If the boolArray[val] has already been set to true,
          //then the character has been duplicated.
          if (boolArray[val])
          {
              return false;
          }
          boolArray[val] = true;
      }
      return true;
  }
  
  

  Console.WriteLine(UniqueString("abca")); //This returns false
  
===========================================================================================================
1.2

  bool CheckPermutation(string str1, string str2)
  {
      //The function converts the string to lower case and sorts the characters
      str1 = sortLowercaseString(str1);
      str2 = sortLowercaseString(str2);

      if (str1 == str2)
      {
          return true;
      }
      return false;
  }

  string sortLowercaseString(string str)
  {
      str = str.ToLower();
      char[] charArray = str.ToArray();
      Array.Sort(charArray);
      str = new string(charArray);
      return str;
  }



  Console.WriteLine(sortLowercaseString("CbA")); //This returns "abc"
  Console.WriteLine(CheckPermutation("abc","bCA")); //This returns true
  
===========================================================================================================
1.3

  string ConvertString(string inputString)
  {
      //Removes spaces from the beginning and end of the string.
      string trimString = inputString.Trim(' ');

      StringBuilder sb = new StringBuilder();
      sb.Append(trimString[0]);

      //Adds non-repeating elements to the StringBuilder.
      //Ex: "aaabbbccc" --> "abc"
      for(int i = 1; i < trimString.Length; i++)
      {
          if(trimString[i] != trimString[i - 1])
          {
              sb.Append(trimString[i]);
          }
      }

      sb.Replace(" ", "%20");
      string result = sb.ToString();

      return result;
  }
  
  

  Console.WriteLine(ConvertString("   t  e  s  t   ")); //This returns "t%20e%20s%20t"
  
===========================================================================================================
1.4

  bool CheckPalindrome(string str)
  {
      List<char> list = new List<char>();

      for (int i = 0; i < str.Length; i++)
      {
          if (list.Contains(str[i]))
          {
              list.Remove(str[i]);
          }
          else
          {
              list.Add(str[i]);
          }
      }

      //Returns true if the string is even, and the number of odd characters is 0
      if (str.Length % 2 == 0 && list.Count == 0)
      {
          return true;
      }

      //Returns true if the string is odd, and the number of odd characters is 1
      else if (str.Length % 2 == 1 && list.Count == 1)
      {
          return true;
      }

      return false;
  }
  
  
  
  Console.WriteLine(CheckPalindrome("abbac")); //This returns true, and the palindrome is "abcba"

===========================================================================================================
1.5

  bool OneAway(string first, string second)
  {
      if (first.Length == second.Length)
      {
          return OneReplace(first, second);
      }
      else if (first.Length + 1 == second.Length)
      {
          //the parameter "first" will be the shorter string, and the parameter "second" will be the longer string.
          return OneAddition(first, second);
      }
      else if (first.Length - 1 == second.Length)
      {
          //the parameter "second" will be the shorter string, and the parameter "first" will be the longer string.
          return OneAddition(second, first);
      }
      else
      {
          return false;
      }
  }

  bool OneReplace(string str1, string str2)
  {
      bool changeMade = false;
      for (int i = 0; i < str1.Length; i++)
      {
          //if the strings have different characters at the same index,
          //then the character will need to be changed to make the strings equal.
          if (str1[i] != str2[i])
          {
              //if changeMade is true, then one character already needed to be changed which will return false.
              if (changeMade)
              {
                  return false;
              }
              changeMade = true;
          }
      }
      return true;
  }

  bool OneAddition(string str1, string str2)
  {
      int j = 0;
      for (int i = 0; i < str1.Length; i++)
      {
          //if the strings have different characters at the same index, then a character would have to be added to make the strings equal.
          if (str1[i] != str2[j])
          {
              //if the current index of the shorter string does not equal the next index of the longer string,
              //then the strings would still be different after adding a character to the shorter string.
              if (str1[i] != str2[j + 1])
              {
                  return false;
              }
              j++;
          }
          j++;
      }
      return true;
  }



  Console.WriteLine(OneAway("ple", "pale")); //This returns true
  Console.WriteLine(OneAway("pales", "pale")); //This returns true
  Console.WriteLine(OneAway("pale", "bale")); //This returns true
  Console.WriteLine(OneAway("pale", "bae")); //This returns false

===========================================================================================================
1.6

  string CompressString(string str)
  {
      StringBuilder sb = new StringBuilder();
      sb.Append(str[0]);
      int count = 1;
      int lastIndex = str.Length - 1;

      for (int i = 1; i < str.Length; i++)
      {
          //if the current index character matches the previous index character,
          //then it is a duplicated character, and the count will be incremented by 1.
          if (str[i] == str[i - 1])
          {
              count++;
              //if the current index character is the last index of the string,
              //then the character count will be added to the StringBuilder.
              if (i == (lastIndex))
              {
                  sb.Append(count);
              }
          }

          //if the current index character does not match the previous index character,
          //then the character count of the previous index character will be added and the character count will be reset to 1.
          //Also the current index character will be added to the StringBuilder.
          else if (str[i] != str[i - 1])
          {
              sb.Append(count);
              count = 1;
              sb.Append(str[i]);
          }
      }

      string compressed = sb.ToString();

      //the shorter length string will be returned
      if (compressed.Length < str.Length)
      {
          return compressed;
      }

      return str;
  }



  Console.WriteLine(CompressString("aabbbcddd")); //This returns a2b3c1d3
  Console.WriteLine(CompressString("abc")); //This returns abc

===========================================================================================================
1.7

int [][] RotateClockWise(int[][] matrix)
{
    /*
    reversing the array does the following:
    1 2 3       7 8 9       
    4 5 6   ->  4 5 6
    7 8 9       1 2 3
    */
    Array.Reverse(matrix);

    /*
                7 4 1    
    final goal: 8 5 2
                9 6 3
    the elements across the diagonal (7, 5, and 3) are already in the correct position.
    the elements below the diagonal (8, 9, and 6) need to be swapped with their mirrored element from above the diagonal (4, 1, and 2).
    */

    for (int i = 0; i < matrix.Length; i++)
    {
        //the elements below the diagonal are where j < i.
        //for example, the element 6 is in position (i, j) = (2, 1)
        for (int j = 0; j < i; j++)
        {
            //the elements below the diagonal are swapped with the elements above the diagonal.
            int temp = matrix[i][j];
            matrix[i][j] = matrix[j][i];
            matrix[j][i] = temp;
        }
    }

    return matrix;
}
    
        
        
int[][] testMatrix =
{
    new int[] { 1, 2, 3 },
    new int[] { 4, 5, 6 },
    new int[] { 7, 8, 9 }
};

Console.WriteLine();
rotateClockWise(testMatrix);

for (int i = 0; i < testMatrix.Length; i++)
{
    for (int j = 0; j < testMatrix[i].Length; j++)
    {
        Console.Write(testMatrix[i][j] + " ");
    }
    Console.WriteLine("");
}
        
/*
This returns the rotated matrix
1 2 3       7 4 1       
4 5 6   ->  8 5 2
7 8 9       9 6 3
*/

===========================================================================================================
1.8

int[][] ZeroMatrix(int[][] matrix)
{
    //two bool arrays for the rows and columns are used to track if a zero exists in the matrix.
    //if a zero exists in the matrix, the entire row and column will be zero, so the exact location of the zero is not needed.
    bool[] rowZero = new bool[matrix.Length];
    bool[] columnZero = new bool[matrix[0].Length];
    for (int i = 0; i < matrix.Length; i++)
    {
        for (int j = 0; j < matrix[0].Length; j++)
        {
            if (matrix[i][j] == 0)
            {
                rowZero[i] = true;
                columnZero[j] = true;
            }
        }
    }

    for (int i = 0; i < rowZero.Length; i++)
    {
        if (rowZero[i])
        {
            SetRowsToZero(matrix, i);
        }
    }

    for (int i = 0; i < columnZero.Length; i++)
    {
        if (columnZero[i])
        {
            SetColumnsToZero(matrix, i);
        }
    }

    return matrix;
}

void SetRowsToZero(int[][] matrix, int row)
{
    for (int i = 0; i < matrix[0].Length; i++)
    {
        matrix[row][i] = 0;
    }
}

void SetColumnsToZero(int[][] matrix, int column)
{
    for (int i = 0; i < matrix.Length; i++)
    {
        matrix[i][column] = 0;
    }
}



int[][] testMatrix =
{
    new int[] { 1, 1, 0, 1 },
    new int[] { 1, 1, 1, 1 },
    new int[] { 1, 0, 1, 1 }
};

for (int i = 0; i < testMatrix.Length; i++)
{
    for (int j = 0; j < testMatrix[0].Length; j++)
    {
        Console.Write(testMatrix[i][j] + " ");
    }
    Console.WriteLine("");
}

Console.WriteLine();
ZeroMatrix(testMatrix);

for (int i = 0; i < testMatrix.Length; i++)
{
    for (int j = 0; j < testMatrix[i].Length; j++)
    {
        Console.Write(testMatrix[i][j] + " ");
    }
    Console.WriteLine("");
}
        
/*
This returns the zero matrix
1 1 0 1     0 0 0 0      
1 1 1 1 ->  1 0 0 1
1 0 1 1     0 0 0 0
*/

===========================================================================================================
1.9

bool IsSubstring(string s1, string s2)
{
    if (s1.Length == s2.Length && s2.Length > 0)
    {
        //s1 = "waterbottle"
        //s2 = "erbottlewat"
        //s1s1 = "waterbottlewaterbottle"
        //duplicating s1 will allow us to check if s2 is a substring
        string s1s1 = s1 + s1;
        if (s1s1.Contains(s2))
        {
            return true;
        }
    }

    return false;
}



Console.WriteLine(IsSubstring("waterbottle","erbottlewat")); //This returns true


